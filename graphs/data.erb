---
layout: page
title: Data
categories: []
tags: []
status: publish
type: page
published: true
meta: {}
---

{% include instapipe.html %}
<script type="text/javascript">
  let url = "https://where-is-felix-today-backend.herokuapp.com/api.json"

  function daysAgo(date) {
    const deltaDays = Math.floor((Date.now() - date.getTime()) / (1000 * 3600 * 24));
    if (deltaDays === 0) {
      return "today";
    } else if (deltaDays === 1) {
      return "yesterday";
    } else {
      return deltaDays + " days ago";
    }
  }
  function daysOrHoursAgo(date) {
    if (daysAgo(date) == "today") {
      const hours = Math.floor((Date.now() - date.getTime()) / (1000 * 3600));
      if (hours == 1) { return "1 hour ago"; }
      else if (hours < 1) { return "less than an hour ago"; }
      else { return hours + " hours ago"; }
    } else {
      return daysAgo(date);
    }
  }

  httpGetAsync(url, function(data) {
    const otherFxLifeData = data["otherFxLifeData"]
    console.log(data)

    // Render map
    document.getElementById("currentLocationMap").style.background = "url('" + data["mapsUrl"] + "') no-repeat"

    // Render current & next locations
    if (data["isMoving"] == false) {
      document.getElementById("isMovingContainer").style.display = "none"
      document.getElementById("currentCityB").innerHTML = data["currentCityText"]
    } else {
      document.getElementById("currentCityContainer").style.display = "none"
      document.getElementById("nextCityB").innerHTML = data["currentCityText"]
    }
    if (data["nextCityText"]) {
      document.getElementById("nextCityB").innerHTML = data["nextCityText"]
    } else {
      document.getElementById("nextCityContainer").style.display = "none"
    }

    // Render today's metadata
    document.getElementById("current-weight").innerHTML = 
      "<span class='highlighted'>" + (otherFxLifeData["weight"]["value"] * 0.453592).toFixed(1) + " kg</span>/ " +
      (otherFxLifeData["weight"]["value"]).toFixed(1) + " lbs"
    document.getElementById("current-weight-time").innerHTML = "(" + daysAgo(new Date(otherFxLifeData["weight"]["time"])) + ")"
    document.getElementById("current-sleep-duration").innerHTML =
      "<span class='highlighted'>" + otherFxLifeData["sleepDurationWithings"]["value"] + " hours</span>tonight"
    document.getElementById("last-workout").innerHTML = daysAgo(new Date(otherFxLifeData["gym"]["time"]))
    document.getElementById("last-meditated").innerHTML = daysAgo(new Date(otherFxLifeData["meditated"]["time"]))
    document.getElementById("data-points").innerHTML = otherFxLifeData["totalAmountOfEntries"]["value"].toLocaleString()
    document.getElementById("data-entries-count").innerHTML = otherFxLifeData["totalAmountOfEntries"]["value"].toLocaleString()


    // Git Details
    document.getElementById("git-time-ago").innerHTML = daysOrHoursAgo(new Date(data["lastCommitTimestamp"]))
    document.getElementById("git-link").href = data["lastCommitLink"]
    document.getElementById("git-link").innerHTML = data["lastCommitMessage"]
    document.getElementById("git-repo-link").href = "https://github.com/" + data["lastCommitRepo"]
    document.getElementById("git-repo-link").innerHTML = data["lastCommitRepo"]

    // Mood
    document.getElementById("current-feeling").innerHTML = data["currentMoodLevel"] + " " + data["currentMoodEmoji"]
    document.getElementById("mood-hours-ago").innerHTML = "(" + data["currentMoodRelativeTime"] + ")"

    // Render food data (if available)
    if (data["todaysMacros"]["kcal"] > 0) {
      document.getElementById("todaysMacros-kcal").innerHTML = data["todaysMacros"]["kcal"] + " kcal"
      const totalKcal = otherFxLifeData["macrosCarbs"]["value"] * 4 + otherFxLifeData["macrosProtein"]["value"] * 4 + otherFxLifeData["macrosFat"]["value"] * 9;
      document.getElementById("total-kcal").innerHTML = totalKcal

      document.getElementById("todaysMacros-carbs").innerHTML = data.todaysMacros.carbs + "g carbs"
      document.getElementById("todaysMacros-protein").innerHTML = data.todaysMacros.protein + "g protein"
      document.getElementById("todaysMacros-fat").innerHTML = data.todaysMacros.fat + "g fat"

      document.getElementById("macrosCarbs-value").innerHTML = data.otherFxLifeData["macrosCarbs"]["value"]
      document.getElementById("macrosProtein-value").innerHTML = data.otherFxLifeData["macrosProtein"]["value"]
      document.getElementById("macrosFat-value").innerHTML = data.otherFxLifeData["macrosFat"]["value"]


      document.getElementById("todaysMacros-kcal-bar-inner").style.width = Math.min(100, Math.round((data["todaysMacros"]["kcal"] / totalKcal) * 100)) + "%"
      document.getElementById("todaysMacros-protein-bar-inner").style.width = Math.min(100, Math.round((data.todaysMacros.protein / data.otherFxLifeData["macrosProtein"]["value"]) * 100)) + "%"
      document.getElementById("todaysMacros-carbs-bar-inner").style.width = Math.min(100, Math.round((data.todaysMacros.carbs / data.otherFxLifeData["macrosCarbs"]["value"]) * 100)) + "%"
      document.getElementById("todaysMacros-fat-bar-inner").style.width = Math.min(100, Math.round((data.todaysMacros.fat / data.otherFxLifeData["macrosFat"]["value"]) * 100)) + "%"

      // Turn the bars red when too high
      if (data.todaysMacros.protein > data.otherFxLifeData["macrosProtein"]["value"]) {
        document.getElementById("todaysMacros-protein-bar-inner").style.background = "red";
      }
      if (data.todaysMacros.carbs > data.otherFxLifeData["macrosCarbs"]["value"]) {
        document.getElementById("todaysMacros-carbs-bar-inner").style.background = "red";
      }
      if (data.todaysMacros.fat > data.otherFxLifeData["macrosFat"]["value"]) {
        document.getElementById("todaysMacros-fat-bar-inner").style.background = "red";
      }
      if (data["todaysMacros"]["kcal"] > totalKcal) {
        document.getElementById("todaysMacros-kcal-bar-inner").style.background = "red";
      }

      // Render the food list
      let foodEntriesTable = document.getElementById("foodEntriesTable")
      for (let i = 0; i < data.todaysFoodItems.length; i++) {
        let foodItem = data.todaysFoodItems[i]
        let row = document.createElement("tr")
        row.className = i >= 3 ? "hidden-food" : ""
        row.style.display = i >= 3 ? "none" : ""
        const amount = foodItem.amount.split("/")[0] // Sometimes mfp has weird slashes, with the units ending up too long
        row.innerHTML = "<td>" + foodItem.name + "</td><td>" + amount + "</td>"
        foodEntriesTable.appendChild(row)
      }
      if (data.todaysFoodItems.length > 3) {
        let row = document.createElement("tr")
        row.className = "show-more-food"
        row.innerHTML = "<td colspan='2'><a onclick='toggleFood()' id='show-all-food-a'>Show all food entries</a></td>"
        foodEntriesTable.appendChild(row)
      }
    } else {
      document.getElementById("food-container").style.display = "none"
    }

    document.getElementById("realTimeDataDiv").style.display = "block"
  })

  function httpGetAsync(url, callback) {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function() { 
        if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
            callback(JSON.parse(xmlHttp.responseText));
        }
    }
    xmlHttp.open("GET", url, true);
    xmlHttp.send(null);
  }
  function toggleFood() {
    // Iterate over all `hidden-food` rows and toggle their display
    let rows = document.getElementsByClassName("hidden-food")
    for (let i = 0; i < rows.length; i++) {
      rows[i].style.display = rows[i].style.display == "none" ? "table-row" : "none"
    }
    const a = document.getElementById("show-all-food-a")
    a.innerHTML = a.innerHTML == "Show all food entries" ? "Hide food entries" : "Show all food entries"
  }
</script>

<div id="mapsContainer">
  <div id="mapsMenuBannerCover"></div>
  <img id="currentLocationMap">
</div>
<div id="story-available" class="story-not-available">
  <img id="storyProfilePicture" src="assets/FelixKrauseCropped.jpg" onclick="showStories()" />
</div>
<div id="mapsContainerCover"></div>

<div id="realTimeDataDiv">
  <h3 id="currentCityContainer">Felix is currently in <b id="currentCityB" class="highlighted"></b></h3>
  <h3 id="isMovingContainer">Felix is currently heading to <b id="nextCityB" class="highlighted"></b></h3>
  <h4 id="nextCityContainer">Leaving for <span id="nextCityText"></span> <span id="nextCityTime"></span></h4>
  <hr />
  <h3 id="feels-h">Felix feels <span class="highlighted" id="current-feeling"></span> <span id="mood-hours-ago" class="ago-subtle"></span></h3>
  <hr />

  <div id="food-container">
    <h3>Felix ate today</h3>
    <div class="food-overview">
      <div>
        <span class="highlighted" id="todaysMacros-kcal"></span> of <span id="total-kcal"></span> kcal
        <span class="macro-bar-outer">
          <div class="macro-bar-inner" id="todaysMacros-kcal-bar-inner"></div>
        </span>
      </div>
      <div>
        <span class="highlighted" id="todaysMacros-carbs"></span> of <span id="macrosCarbs-value"></span>g
        <span class="macro-bar-outer">
          <div class="macro-bar-inner" id="todaysMacros-carbs-bar-inner"></div>
        </span>
      </div>
      <div>
        <span class="highlighted" id="todaysMacros-protein"></span> of <span id="macrosProtein-value"></span>g
        <span class="macro-bar-outer">
          <div class="macro-bar-inner" id="todaysMacros-protein-bar-inner"></div>
        </span>
      </div>
      <div>
        <span class="highlighted" id="todaysMacros-fat"></span> of <span id="macrosFat-value"></span>g
        <span class="macro-bar-outer">
          <div class="macro-bar-inner" id="todaysMacros-fat-bar-inner"></div>
        </span>
      </div>
    </div>

    <div id="foodEntries">
      <table id="foodEntriesTable" cellspacing="0" cellpadding="0">
      </table>
    </div>
    <hr />
  </div>

  <div id="table-container">
    <table id="real-time-table" cellspacing="0" cellpadding="0">
      <tr>
        <td>Weight</td>
        <td>
          <span id="current-weight"></span>
          <span id="current-weight-time" class="ago-subtle"></span>
        </td>
      </tr>
      <tr>
        <td>Slept</td>
        <td id="current-sleep-duration"></td>
      </tr>
      <tr>
        <td>Last workout</td>
        <td><span class="highlighted" id="last-workout" /></td>
      </tr>
      <tr>
        <td>Last meditated</td>
        <td><span class="highlighted" id="last-meditated" /></td>
      </tr>
      <tr>
        <td>Number of data entries</td>
        <td><span class="highlighted" id="data-entries-count" /></td>
      </tr>
    </table>
  </div>

  <hr />
  <p style="margin-top: -25px;" class="git-footnote">Last code commit: <span id="git-time-ago" class="git-footnote" /></p>
  <h3 id="git-header">
    <a target="_blank" href="" id="git-link"></a>
  </h3>
  <p class="git-footnote">on GitHub repo <a target="_blank" href="" id="git-repo-link"></a></p>
  <hr />

  <p style='text-align: center; margin-top: -10px;'><a href="https://whereisfelix.today">More real-time data on WhereIsFelix.today</a></p>
</div>

<h1>My whole life in a single database</h1>

As part of the [FxLifeSheet project](https://github.com/KrauseFx/FxLifeSheet) I've started back in 2019, I started collecting all kinds of metrics about my life.
Every single day for the last 2.5 years I've tracked over 100 different data types of my life.

I haven't yet had the time to analyze all the outcomes, but felt like I already have some very interesting graphs I'd like to share here.

Currently, I have <b><span id="data-points">~380,000</span> data points</b>, with the biggest data sources being:

<table>
  <tr><th>Data Source</th><th>Number of data entries</th><th>Type of data</th></tr>
  <tr><td>RescueTime</td><td>150,000</td><td>Daily computer usage</td></tr>
  <tr><td>Foursquare Swarm</td><td>125,000</td><td>Location and POI data</td></tr>
  <tr><td>Manually entered</td><td>63,000</td><td>Fitness, mood, socializing, productivity</td></tr>
  <tr><td>Manually entered time ranges</td><td>10,000</td><td>Occupation, lockdown status, home setup</td></tr>
  <tr><td>Weather API</td><td>16,000</td><td>Temperature, rain, sunlight, wind, air pressure</td></tr>
  <tr><td>Apple Health</td><td>1,000</td><td>Steps data</td></tr>
</table>

This project has 3 components:

<b>◦ Database</b>

A timestamp-based key-value database of all data entries powered by Postgres. This allows me to add and remove questions on-the-fly.

<img src="graphs/assets/fxlifesheet-database.png">

<b>◦ Data Inputs</b>

Multiple times a day, I manually answer questions [FxLifeSheet](https://github.com/KrauseFx/FxLifeSheet) sends me via a Telegram bot.

<b>◦ Data Visualizations</b>

After having tried various tools available to visualize, I ended up writing my own data analysis layer using Ruby, JavaScript together with [Plotly](https://plotly.com/javascript/).

<%
def convert_markdown_to_html_links(string)
  string.gsub(/\[([^\]]+)\]\(([^\)]+)\)/) do |match|
    "<a href='#{$2}' target='_blank'>#{$1}</a>"
  end
end
%>

<div id="graphs-container">
  <% all_data.each do |entry| %>
    <% filter = "graphs/screens/#{entry["id"]}." %>
    <% img_url = Dir["#{filter}png", "#{filter}jpg"].first %>
    <% raise "Screenshot '#{entry["id"]}' doesn't exist" if img_url.nil? %>

    <div class="graphs-entry" id="graphs-entry-<%= entry["id"] %>">
      <h3><%= entry.fetch("title") %></h3>
      <p class="graph-description">
        <%= convert_markdown_to_html_links(entry["description"]) %>
      </p>

      <ul>
        <% Array(entry["takeaways"]).each do |takeaway| %>
          <li><%= takeaway%></li>
        <% end %>
      </ul>

      <span class="graph-sources">
        <span class="graph-sources-header">
          Sources: 
        </span>
        <%= Array(entry.fetch("source")).join(", ") %>
      </span>

      <img src="<%= img_url %>" class="image-link" alt="<%= entry["title"] %>" onclick="enlargeImage(this, '<%= img_url %>', '<%= entry["title"] %>')" />

      <span class="graph-date"><%= entry.fetch("years") %> years of data - Last updated on <%= entry.fetch("updated") %></span>
    </div>
  <% end %>
</div>

<div id="enlargedImageContainer" onclick="dismissImage()">
  <a target="_blank" id="enlargedImageLink">
    <img id="enlargedImage" />
  </a>
  <p id="enlargedImageTitle"></p>
</div>

<div id="arrow-left-button" class="arrow-button"></div>
<div id="arrow-right-button" class="arrow-button"></div>

<script type="text/javascript">
  // Subscribe to mouse wheel
  const imageLinks = document.getElementsByClassName("image-link")
  for (let i = 0; i < imageLinks.length; i++) {
    imageLinks[i].addEventListener("mousedown", function(event) {
      console.log(event.button)
      if (event.button === 1) { // 1 = center mouse button
        event.preventDefault()
        window.open(this.getAttribute("src"), '_blank');
      }
    })
  }

  let lastNode = null;

  function enlargeImage(node, img, title) {
    // Check if this is a center mouse click (Control or Meta Key)
    if (event.ctrlKey || event.metaKey) {
      window.open(img, '_blank');
      return;
    }

    // Check if it's already been the selected one
    if (lastNode == node.parentElement) {
      showFullScreen(img, title);
      return;
    }

    if (lastNode) {
      lastNode.classList.remove("graph-entry-selected");
    }
    node.parentElement.classList.add("graph-entry-selected");

    alignArrowKeys(node.parentElement);

    node.parentElement.scrollIntoView();

    // If we have a small screen, we also want to immediately use full-screen mode
    var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
    if (width < 800) {
      showFullScreen(img, title);
    }

    lastNode = node.parentElement;
  }

  function alignArrowKeys(node) {
    // Attach the arrows to be next to the `graph-entry-selected`
    const arrowLeft = document.getElementById("arrow-left-button");
    const arrowRight = document.getElementById("arrow-right-button");
    const topPx = (node.offsetTop + 250 - arrowRight.offsetHeight / 2) + "px";

    arrowLeft.style.left = (node.offsetLeft - arrowLeft.offsetWidth - 10) + "px";
    arrowLeft.style.top = topPx;

    arrowRight.style.left = (node.offsetLeft + node.offsetWidth - arrowRight.offsetWidth + 50) + "px";
    arrowRight.style.top = topPx;
  }

  function showFullScreen(img, title) {
    document.getElementById("enlargedImageContainer").style.display = "block";
    document.getElementById("enlargedImage").src = img;
    document.getElementById("enlargedImageLink").href = img;
    document.getElementById("enlargedImageTitle").innerHTML = title;
  }

  function dismissImage() {
    document.getElementById("enlargedImageContainer").style.display = "none";
  }

  function nextGraph() {
    if (lastNode) {
      lastNode.classList.remove("graph-entry-selected");
      lastNode = lastNode.nextElementSibling;
      lastNode.classList.add("graph-entry-selected");

      alignArrowKeys(lastNode)
      lastNode.scrollIntoView();        
      clearSelection();
      return false;
    }
    return true;
  }
  function previousGraph() {
    if (lastNode) {
      lastNode.classList.remove("graph-entry-selected");
      lastNode = lastNode.previousElementSibling;
      lastNode.classList.add("graph-entry-selected");

      alignArrowKeys(lastNode)
      lastNode.scrollIntoView();        
      clearSelection();
      return false;
    }
    return true;
  }

  function clearSelection() {
    // As sometimes the arrows get selected
    if (window.getSelection) {window.getSelection().removeAllRanges();}
    else if (document.selection) {document.selection.empty();}
  }

  document.getElementById("arrow-left-button").addEventListener("click", previousGraph);
  document.getElementById("arrow-right-button").addEventListener("click", nextGraph);

  window.addEventListener("keyup", function(e) {
    if (e.keyCode == 27) { // ESC
      dismissImage()
      return true;
    }

    // Use arrow keys
    if (e.keyCode == 37 || e.keyCode == 38) { // Left and up
      return previousGraph();
    }
    if (e.keyCode == 39 || e.keyCode == 40) { // Right and down
      return nextGraph();
    }
  }, false);
</script>

<style type="text/css">
  #graphs-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    margin-top: 30px;
  }
  #enlargedImageContainer {
    position: fixed;
    display: none;
    z-index: 100;
    top: 0;
    cursor: pointer;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.8);
    height: 100%%;
    width: 100%%;
    text-align: center;
    padding-top: 40px;
  }
  #enlargedImage {
    background-color: green;
    object-fit: contain;
    max-height: calc(100% - 80px);
    max-width: 1200px;
  }
  @media (max-width: 1200px) {
    #enlargedImage {
      max-width: 100%;
      max-height: 100%;
    }
  }
  #enlargedImageTitle {
    color: white;
    font-size: 30px;
    font-weight: bold;
    margin-top: 20px;
    line-height: 1.2;
  }
  .graphs-entry {
    max-width: 470px;
    margin: 10px;
    border: 2px solid #e4e7ef;
    border-radius: 9px;
    padding: 20px;
  }
  .graphs-entry > ul > li {
    color: #555;
  }
  .graphs-entry > h3 {
    font-size: 140%;
  }
  .graph-description {
    color: #555;
  }
  .graph-sources-header {
    color: #555;
    font-weight: bold;
  }
  .graph-sources {
    color: #777;
  }
  .graph-date {
    float: right;
    color: #777;
    margin-top: 10px;
    font-size: 75%;
    margin-bottom: -10px;
  }
  .image-link {
    padding-top: 10px;
    cursor: pointer;
  }

  /* Real-Time Dashboard UI */
  #mapsContainer {
    width: 100%;
    height: 'auto';
    position: absolute;
    top: 0px;
    left: 0px;
    z-index: -1;
  }
  #mapsMenuBannerCover {
    height: 90px;
    border-bottom: 2px solid #e4e7ef;
    background-color: rgba(255, 255, 255, 0.9);
    width: 100%;
    position: absolute;
    top: 0px;
    z-index: 2;
  }
  #currentLocationMap {
    width: 100%;
    background-position: center !important;
    background-size: cover !important;
    height: 350px;
  }
  #mapsContainerCover {
    height: 320px;
  }
  #storyProfilePicture {
    width: 128px;
    height: 128px;
    border-radius: 70px;
    cursor: pointer;
    border: 4px solid #fff;
  }
  #story-available {
    margin-left: auto;
    margin-right: auto;
    left: 0;
    right: 0;
    position: absolute;
    top: 280px;
    z-index: 10 !important;
  }
  #realTimeDataDiv {
    width: 100%;
    text-align: center;
    display: none;
    border-bottom: 2px solid #e4e7ef;
    margin-bottom: 25px;
    padding-bottom: 10px;
    margin-top: -33px;
  }
  .highlighted {
    font-weight: normal;
    background-color: rgba(255, 255, 0, 0.35);
    padding: 5px;
    margin-left: -5px;
  }
  #food-container {
    margin-bottom: 40px;
    margin-top: -20px;
  }
  #feels-h {
    margin-top: -10px;
    margin-bottom: 20px;
  }
  hr {
    border: 0;
    height: 1px;
    background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(40, 40, 40, 0.3), rgba(0, 0, 0, 0));
    margin-bottom: 35px;
    background-color: transparent !important;
  }
  .ago-subtle {
    color: #666;
    font-size: 14px;
  }
  #real-time-table {
    border: none;
  }
  #real-time-table > * > tr > td:first-child {
    text-align: right;
  }
  #table-container { 
    margin-top: 20px; 
    margin-left: auto; 
    margin-right: auto; 
    text-align: left; 
    width: 450px;
  }
  .git-footnote {
    text-align: center;
    margin-bottom: -6px;
    margin-top: -10px;
    color: #666;
    font-size: 14px;
  }
  #git-repo-link {
    text-decoration: none !important;
  }
  #git-header {
    margin-top: 10px;
    font-size: 25px;
    margin-bottom: 20px;
  }
  #git-header > a {
    color: #333 !important;
    font-weight: 400 !important;
    font-size: 90%;
  }
  @media screen and (max-width: 800px) {
    #current-weight-time {
      display: none;
    }
    #real-time-table > * > tr > td:first-child {
      width: 115px;
    }
  }
  @media screen and (max-width: 450px) {
    #real-time-table {
      max-width: 80%;
    }
  }
  .food-overview {
    line-height: 60px;
  }
  .food-overview > div {
    margin: 0 30px;
    display: inline;
    position: relative;
    text-align: center;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  .macro-bar-outer {
    width: 110px;
    background-color: rgba(205, 205, 205, 0.5);
    height: 8px;
    border-radius: 5px;
    position: absolute;
    margin-top: 55px;
    margin-left: auto;
    margin-right: auto;
    left: 0;
    right: 0;
    text-align: center;
  }
  .macro-bar-inner {
    width: 0px;
    background-color: rgba(0, 220, 0, 1);
    height: 8px;
    border-radius: 5px;
  }
  #foodEntries {
    margin-top: 30px;
    width: 100%;
    text-align: center;
  }
  #foodEntriesTable {
    border: none;
    width: 430px;
    max-width: 100%;
    margin-left: auto;
    margin-right: auto;
    white-space: nowrap;
  }
  #foodEntriesTable > tr {
    background-color: rgba(255, 255, 255, 0.9) !important;
    font-size: 90%;
    line-height: 1.35;
  }
  #foodEntriesTable > tr > td {
    color: #669;
    padding: 9px 0 0;
    border: none;
    text-overflow: ellipsis;
    overflow: hidden;
  }
  #foodEntriesTable > tr > td:first-child {
    max-width: 270px;
  }
  #foodEntriesTable > tr > td:last-child {
    max-width: 80px;
    width: 80px;
  }
  .hidden-food {
    display: none;
  }
  #show-all-food-a {
    font-weight: bold;
    text-decoration: none;
    cursor: pointer !important;
  }
  .graph-entry-selected {
    max-width: 100%;
    border: 3px solid #00BFFF;
  }
  .arrow-button {
    position: absolute;
    height: 40px;
    top: calc(50% - 10px);
    cursor: pointer;
    top: -100px;
  }
  #arrow-right-button {
    content: url('/graphs/assets/source_icons_arrow-right-circled.svg');
  }
  #arrow-left-button {
    content: url('/graphs/assets/source_icons_arrow-left-circled.svg');
  }
  @media screen and (max-width: 800px) {
    #arrow-right-button {
      display: none;
    }
    #arrow-left-button {
      display: none;
    }
  }
</style>
